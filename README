### INTRODUCTION

Any program can only be really useful if it complies with the Unix
philosophy. Web browsers (and other tools that work with HTML, such as feed
readers) are frequent violators of this principle:

* They build in way too much things into one (complex) program, dramatically
  decreasing the options to do things the way you want.
* They store things in way too fancy formats (XML, RDF, SQLite, etc.) which are
  hard to store under version control, reuse in other scripts, and so on.

The Uzbl project was started as an attempt to resolve this.

### EDITIONS

"Uzbl" is an umbrella project consisting of different flavors. In the future
more things may come, but for now:

#### uzbl-core: main component meant for integration with other tools and scripts

* Uses WebKitGtk+ for rendering and network interaction (libsoup). CSS,
  JavaScript, and plugin support come for free.
* Provides interfaces to get data in (commands/configuration) and out (events):
  stdin/stdout/fifo/Unix sockets.
* You see a WebKit view and (optionally) a statusbar which gets populated
  externally.
* No built-in means for URL changing, loading/saving of bookmarks, saving
  history, keybinds, downloads, etc.
* Extra functionality: many sample scripts come with it. More are available on
  the [Uzbl wiki](http://www.uzbl.org/wiki/scripts) or you can write them
  yourself.
* Entire configuration/state can be changed at runtime.
* Uzbl keeps it simple, and puts **you** in charge.

#### uzbl-browser: a complete browser experience based on uzbl-core

* Uses a set of scripts (mostly Python) that will fit most people, so things
  work out of the box; yet plenty of room for customization.
* Brings everything you expect: URL changing, history, downloads, form filling,
  link navigation, cookies, event management etc. However: one page per
  instance.
* Advanced, customizable keyboard interface with support for modes, modkeys,
  multichars, variables (keywords) etc. (eg you can tweak the interface to be
  Vi-like, Emacs-like or any-other-program-like).
* Adequate default configuration.
* Focus on plaintext storage for your data and configs in simple, parseable
  formats and adherence to the XDG basedir spec.
* Visually, similar to `uzbl-core` except that the statusbar contains useful
  information. One window per webpage.

#### uzbl-tabbed: wraps around uzbl-browser and multiplexes it

* Spawns one window containing multiple tabs, each tab containing a full
  embedded `uzbl-browser`.
* Ideal as a quick and simple solution to manage multiple `uzbl-browser`
  instances without getting lost.

Throughout the documentation, when referring to `uzbl` we mean `uzbl-core`,
unless otherwise specified.

### CONFIGURATION / CONTROL:

The general idea is that Uzbl by default is very bare bones. You can send it
commands to update settings and perform actions, through various
interfaces. There is a limited default configuration. Please see `config.h` to
see what it contains. By default, there are *no* keybinds defined at
all. (Default keybinds would work counterproductive when you try to
customize). For examples of the possibilities what you can do, please see the
sample config(s), and uzbl wiki page.

There are several interfaces to interact with Uzbl:

* `uzbl --config <filename>`: `<filename>` will be read line by line, and the
  commands in it will be executed. Useful to configure Uzbl at startup. If you
  have a file in `$XDG_CONFIG_HOME/uzbl/config` (this expands to
  `~/.config/uzbl/config` on most systems), it will be automatically recognized.
* `stdin`: to write commands into `stdin`, use `--config -` (or `-c -`).
* Interactive: you can enter commands (and bind them to shortcuts, even at
  runtime) By default, the behaviour is modal (Vi style):

  - command mode: every keystroke is interpreted to run commands
  - insert mode: keystrokes are not interpreted so you can enter text into html
    forms

  There is also support for "chained" commands (multiple characters long), and
  keyworded commands. Also you can have incremental matching on commands or
  match after pressing return. See the sample configuration file for more info.

  Also, copy and paste works when typing commands:

  - `insert` (paste X cliboard)
  - `shift insert` (paste primary selection buffer)

* FIFO & socket files: If enabled by setting their paths through one of the
  above means, you can have socket and fifo files available which are very
  useful to programmatically control `uzbl` (from scripts etc).

  - The advantage of the FIFO is you can write plaintext commands to it, but
    it's half duplex only (`uzbl` cannot send a response to you).
  - The socket is full duplex but you need a socket-compatible wrapper such as
    `socat` to work with it. For example:

      echo <command> | socat - unix-connect:<socketfile>

When `uzbl` forks a new instance (eg "open in new window") it will use the same
command line arguments (eg the same `--config <file>`), except `--uri` and
`--name`. If you made changes to the configuration at runtime, these are not
passed on to the child.

#### Uzbl-browser

* default config
* Event Manager
* Event Manager plugins
* bindings/events/requests

#### Uzbl-tabbed

* also has some of its own keybindings.

### COMMAND SYNTAX

Uzbl will read commands via standard input, named FIFO pipe (if `fifo_dir` is
set) and Unix socket (when `socket_dir` is set). For convenience, `uzbl` can
also be instructed to read commands from a file on startup by using the
`--config` option. Indeed, the config file is nothing more than a list of
commands.

Each command starts with the name of a command or a `uzbl` variable that expands
to it. A command is terminated by a newline. Empty lines and lines that start
with the hash sign are ignored by the parser. Command names are always written
in lowercase.

The following commands are recognized:

* `back`
  - Navigate to the previous URI in the history.
* `forward`
  - Navigate to the next URI in the history.
* `scroll <vertical|horizontal> <argument>`
  - argument can be `begin`, `end`, or an amount given in pixels(?)  or as a
     percentage of the size of the view
  - set the amount to 100% to scroll a whole page
* `reload`
  - Reload the current page.
* `reload_ign_cache`
  - Reload the current page, discarding any cached resources.
* `stop`
  - Stop loading the current page.
* `zoom_in`
  - Increase the zoom level.
* `zoom_out`
  - Decrease the zoom level.
* `toggle_zoom_type`
  - Toggles the variable `zoom_type` between "full-content" and "text-only"
    zoom. In "text-only" zoom, only the text of the page is zoomed, while in
    "full-content" zoom, images and other page elements are zoomed along with
    the text.
* `uri <address>`
  - Attempt to load `<address>`. This is equivalent to `set uri = <address>`.
* `js <body>`
  - Execute the JavaScript in `<body>`.
  - Remember that the commands must not contain line breaks.
* `script <file>`
  - Execute the JavaScript in `<file>`.
* `toggle_status`
  - Toggle the display of the status bar.
* `spawn <executable> <additional args>` TODO explain path-alike expansion
  - Runs a command; see EXTERNAL SCRIPTS for details.
  - `$PATH` is searched, so giving the full path to commands is not necessary.
  - Note that the arguments as specified in "EXTERNAL SCRIPTS" are appended at
    the end, so the argument numbers will be higher.
* `sync_spawn <executable> <additional args>`
  - A synchronous variant of `spawn`, which means `uzbl` will wait for it to
    return.
  - You should only need to use this manually if you want to use a `chain`
    command in a handler that wants output from the command it runs.
* `sh <command>`
  - Runs a shell command by expanding `%s` in the `shell_cmd` variable with the
    specified command; primarily useful as a shortcut for `spawn sh -c
    <command>`
  - Note that the arguments as specified in "EXTERNAL SCRIPTS" are appended at
    the end, so the argument numbers will be higher.
* `sync_sh <command>`
  - Synchronous version of `sh`, See `sync_spawn`.
* `talk_to_socket <socketfile> <tokens>`
  - Send a message to `<socketfile>` and wait for a response. `<tokens>` are
    concatenated and separated by ASCII NUL bytes.
  - Expects the socket type to be `SOCK_SEQPACKET` (see `connect(2)`).
  - Waits for 500ms for a response.
* `exit`
  - Closes `uzbl`.
* `search <string>`
  - Search forward for `<string>`. With no string, search for the next
    occurrence of the previously searched string.
* `search_reverse <string>`
  - Like `search`, but searches backward.
* `search_clear`
  - Dehighlight matches and clear the search string.
* `dehilight`
  - Remove highlighting of search matches.
* `set <key> = <value>`
  - Sets `<key>` to `<value>`.
  - The changes are effective immediately; for example, setting the variable
    `uri` will make `uzbl` start loading, and changing `status_format` will make
    the status bar react immediately.
  - If you want to unset a string, use `set` with one space after the equals
    sign.
* `dump_config`
  - Dumps the current config (which may have been changed at runtime) to stdout.
  - Uses a format which can be piped into `uzbl` again or saved as a config
    file.
* `dump_config_as_events`
  - Dump the current config as a series of `VARIABLE_SET` events, which can be
    handled by an event manager.
* `chain <command> <command> ...`
  - Used for chaining multiple commands.
  - Remember to quote the commands; one command must come as one parameter.
  - If you use `chain` with a handler script which must return some output (such
    as a cookie handler -- `uzbl` will wait for and use its output), use
    `sync_spawn` or `sync_sh` instead of `spawn` or `sh` in the command that
    should give the output.
* `print <string>`
  - Expands variables in `<string>` and prints its output to stdout. Is useful
    for getting the value of variables.
* `event <event_name> [event_details]`
  - Send a custom event.
* `request <request_name> [request_details]`
  - Send a custom request (same idea as events, but to be processed by the event
    manager, not `uzbl-core`).
* `menu_add <label> = <command>`
  - Add a new entry `<label>` to the default right-click menu that will execute
    `<command>`.
* `menu_link_add <label> = <command>`
  - Add a new entry `<label>`, executing `<command>` to the right-click menu for
    links.
* `menu_image_add <label> = <command>`
  - Same as `menu_add`, but for images.
* `menu_editable_add <label> = <command>`
  - Same as `menu_add`, but for editable text areas.
* `menu_separator <label>`
  - Add a separator, named `<label>` to the default right-click menu.
* `menu_link_separator <label>`
  - Same as `menu_separator`, but for links.
* `menu_image_separator <label>`
  - Same as `menu_separator`, but for images.
* `menu_editable_separator <label>`
  - Same as `menu_separator`, but for editable text areas.
* `menu_remove <label>`
  - Removes the menu entry `<label>` from the default right-click menu.
* `menu_link_remove <label>`
  - Same as `menu_remove`, but for links.
* `menu_image_remove <label>`
  - Same as `menu_remove`, but for images.
* `menu_editable_remove <label>`
  - Same as `menu_remove`, but for editable text areas.
* `hardcopy`
  - Open the print dialog.
* `include <file>`
  - Read contents of `<file>` and interpret as a set of `uzbl` commands.

### VARIABLES AND CONSTANTS

Uzbl has a lot of internal variables and constants. You can get the values
(using the `print` command, see above), and for variables you can also change
the value at runtime. Some of the values can be passed at start up through
commandline arguments, others need to be set by using commands (eg in config
file).

* Some of them have default values (see config.h)
* Some variables have callback functions which will get called after setting the
  variable to perform some additional logic (see below).
* Besides the builtin variables you can also define your own ones and use them
  in the exact same way as the builtin ones.

#### Variables

* `uri`: The URI of the current page. (callback: load the uri)
* `verbose`: Controls the verbosity printed to `stdout`.
* `inject_html`: Inject an HTML string, navigating to the URI "about:blank" and
  rendering the HTML sting given.
* `geometry`: Geometry and position of the Uzbl window. Format is
  "<width>x<height>+<x-offset>+<y-offset>".
* `keycmd`: Holds the input buffer (callback: update input buffer).
* `show_status`: Show statusbar or not.
* `status_top`: statusbar on top?
* `status_format`: Marked up, to be expanded string for statusbar (callback:
  update statusbar).
* `status_background`: color which can be used to override Gtk theme.
* `title_format_long`: titlebar string when no statusbar shown (will be
  expanded).
* `title_format_short`: titlebar string when statusbar shown (will be expanded).
* `icon`: path to icon for Gtk.
* `forward_keys`: Whether `uzbl-core` should send key events to the webkit view.
* `cookie_handler`: Handler called when the page requests a cookie to be
  retrieved or set. Appends the following arguments to the standard handler
  arguments.
  - `op`: Either "GET" if the browser requests a cookie to be sent to the server
    or "PUT" if the server requests the browser save a cookie.
  - `scheme`: The request address scheme ("http" or "https").
  - `host`: The host requesting the cookie.
  - `path`: The request address path.
  - `data`: The cookie data. Only included for "PUT" requests.
* `scheme_handler`: handler to execute for each URI navigated to - the
  navigation request will be ignored if handler prints "USED\n"
* `fifo_dir`: location to store FIFOs.
* `socket_dir`: location to store sockets.
* `http_debug`: HTTP debug mode (value 0-3).
* `scrollbars_visible`: set to 1 to have GTK scrollbars if the document
  doesn't fit into the window (defaults to 0)
* `javascript_windows`: Whether javascript can open windows automatically
* `shell_cmd`: Alias which will be expanded to use shell commands (eg `sh -c`).
* `print_events`: show events on stdout
* `proxy_url`: set HTTP proxy (eg: `http://<host>:<port>`).
* `max_conns`: Max simultaneous connections (default: 100).
* `max_conns_host`: max simultaneous connections per hostname (default: 6)
* `view_source`: Set the browser in "view source" mode (default 0). Any URI
  visited while "view_source" is 1 will display the page source rather than the
  rendered content.
* `useragent`: The User-Agent to send to the browser, expands variables in its
  definition.
* `zoom_level`: The factor by which elements in the page are scaled with respect
  to their original size. Setting this will resize the currently displayed page.
* `zoom_type`: Whether to use "full-content" zoom (defaults to true). With
  full-content zoom on, all page content, not just text, is zoomed. When
  full-content zoom is off, only the text of a page is zoomed.
* `font_size`: The default font size.
* `default_font_family`: The default font family used to display text.
* `monospace_font_family`: The default font family used to display monospace
  text.
* `cursive_font_family`: The default Cursive font family used to display text.
* `sans_serif_font_family`: The default Sans Serif font family used to display
  text.
* `serif_font_family`: The default Serif font family used to display text.
* `fantasy_font_family`: The default Fantasy font family used to display text.
* `monospace_size`: The default size of monospaced font (default 1).
* `minimum_font_size`: The minimum font size used to display text (default 1).
* `disable_plugins`: Disable embedded plugin objects (default 0).
* `disable_scripts`: Disable embedded scripting languages (default 0).
* `autoload_images`: Automatically load images (default 1).
* `autoshrink_images`: Shrink images to window size (default 0).
* `enable_spellcheck`: Whether to enable spell checking while typing (default
  0).
* `enable_private`: Whether to enable private browsing mode (default 0).
* `print_backgrounds`: Print background images? (default 0).
* `stylesheet_uri`: Use this to override the pagelayout with a custom
  stylesheet.
* `resizable_text_areas`: Whether text areas can be resized (default 0).
* `default_encoding`: The default text encoding (default "iso-8859-1").
* `enforce_96_dpi`: Enforce a resolution of 96 DPI (default 1).
* `caret_browsing`: Whether the caret is enabled in the text portion of pages
  (default 0).
* `follow_hint_keys`: keys for keyboard-based navigation and link
   highlighting

#### Constants (not dumpable or writeable)

* `WEBKIT_MAJOR`: WebKit major version number.
* `WEBKIT_MINOR`: WebKit minor version number.
* `WEBKIT_MICRO`: WebKit micro version number.
* `ARCH_UZBL`: Processor architecture for which Uzbl is compiled, set at compile
  time.
* `COMMIT`: ID of the current Git commit, set at compile time.
* `TITLE`: The current page title or "(no title)" if no title exists for the
  current page.
* `SELECTED_URI`: The URL currently hovered over by the mouse.
* `NAME`: name of the uzbl instance (TODO: can't we make this a variable?)
  - default: Xorg window id
  - overridable with cmdline arg
  - in GtkSocket mode, this is a random number to prevent name clashes
* `PID`: The process ID of this Uzbl instance.

### VARIABLE EXPANSION AND COMMAND / JAVASCRIPT SUBSTITUTION

Variable expansion works pretty much as known from shell interpreters (sh, bash,
etc.). This means you can construct strings with uzbl variables in them and have
uzbl replace the variable name with its contents.

In order to let uzbl know what to expand you'll need to prepend @ to the
variable name:

    print The variable \@show_status contains @show_status

The above example demonstrates two things:

* `\` is treated as escape character and will use the character immediately
  following it literally this means `\@show_status` will not expand to the
  variable content but be rather printed as `@show_status`
* prepending the variable with `@` will expand to its contents
* like in the shell you can use `@{uzbl_var}` to denote the beginning/end of the
  variable name in cases where it is not obvious what belongs to the name and
  what not. E.g. `print @{show_status}foobar`

Command substitution will launch any commands and substitute the call with the
return value of the command. There are two methods:

* Through a shell: enclose commands with `@( )@` (quote escaping is handled by
    Uzbl):

    print Command substitution: @(uname -a)@

This method allows you to use POSIX shell syntax in your commands.

* directly:

    print Command substitution: @(+uname -a)@

This example will execute uname directly.

Note that you can access any `uzbl` variable from within a command substitution:

    print @(echo -n 'Accessing the show_status var from an external script, value: @show_status')@

JavaScript substitution works in the exact same way as command substitution but
you will need to enclose the JavaScript in `@< >@`.

    print The currently viewed document contains @<document.links.length>@ links

The `@<>@` substitution can also load JavaScript from a file, syntax: `@<+filename>@`

    print JS return value from file: @<+/path/to/file.js>@

Variable expansion also works within a JavaScript substitution.

When a piece of text needs to be XML escaped after it is expanded (for example,
in the status bar format), you can use `@[ ]@` substitution:

    print This text is XML escaped: @[<&>]@

    # prints: This text is XML escaped: &lt;&amp;&gt;

NOTE: If you need to use literal `@` or `\` characters you will need to escape
them:

    print At sign: \@  and backslash: \\

### TITLE AND STATUS BAR EVALUATION

The contents of the status bar can be customized by setting the `status_format`
variable. The contents of the window title can be customized by setting the
`title_format_short` variable (which is used when the status bar is displayed)
and the `title_format_long` variable (which is used when the status bar is not
displayed). Their values can be set using the expansion and substitution
techniques described above.

These variables are expanded in multiple stages; once when the variable is set,
and again every time that the status bar or window title are updated. Expansions
that should be evaluated on every update need to be escaped:

    set title_format_short = @(date)@
    # this expansion will be evaluated when the variable is set.
    # the title will stay constant with the date that the variable was set.

    set title_format_short = \@(date)\@
    # this expansion will be evaluated when the window title is updated.
    # the date in the title will change when you change pages, for example.

    set title_format_short = \\\@(date)\\\@
    # the title will stay constant as a literal "@(date)@"

The `status_format` variable can contain
[Pango](http://library.gnome.org/devel/pango/stable/PangoMarkupFormat.html)
markup . In the `status_format`, variables that might contain characters like
`<`, `&` and `>`, should be wrapped in a `@[ ]@` substitution so that they don't
interfere with the status bar's markup; see the sample config for examples.

### EXTERNAL SCRIPTS

You can use external scripts with Uzbl the following ways:

* Let `uzbl` call them. These scripts are called "handlers" in the `uzbl`
  config. Used for handling cookies, starting a new download, and more.
* Call them yourself from inside `uzbl`. You can bind keys for this. Examples:
  add new bookmark, load new URL.
* You could also use `xbindkeys` or your WM config to trigger scripts if `uzbl`
  does not have focus.

Have a look at the sample configs and scripts!

Handler scripts that are called by `uzbl` are passed the following arguments:

* `$1 config`: The configuration file loaded by this `uzbl` instance.
* `$2 pid`: The process ID of this `uzbl` instance.
* `$3 x_id`: The X Windows ID of the process.
* `$4 fifo`: The filename of the FIFO being used, if any.
* `$5 socket`: The filename of the Unix socket being used, if any.
* `$6 uri`: The URI of the current page.
* `$7 title`: The current page title.
* `.. [ script specific ] (optional)`

The script specific arguments are:

* download

  - `$8 url`: The URL of the item to be downloaded.
  - `$9 proxy`: (optional) The URL of an HTTP proxy.

* cookie handler

  - `$8 GET/PUT`: Whether a cookie should be sent to the server (`GET`) or
    stored by the browser (`PUT`).
  - `$9 scheme`: Either `http` or `https`.
  - `$10 host`: If current page URL is `www.example.com/somepage`, this could be
    something else than `example.com`, eg advertising from another host.
  - `$11 path`: The request address path.
  - `$12 data`: The cookie data. Only included for `PUT` requests.

* scheme handler

  - `$8 URI` of the page to be navigated to

* authentication handler:

    $8 authentication zone unique identifier
    $9 domain part of URL that requests authentication
    $10 authentication realm
    $11 FALSE if this is the first attempt to authenticate, TRUE otherwise

Custom, userdefined scripts (`spawn foo bar`) get first the arguments as
specified in the config and then the above 7 are added at the end.

### Formfiller.sh

Example config entries for formfiller script

    set formfiller = spawn @scripts_dir/formfiller.sh
    @cbind    za        = @formfiller add
    @cbind    ze        = @formfiller edit
    @cbind    zn        = @formfiller new
    @cbind    zl        = @formfiller load
    @cbind    zo        = @formfiller once

NEW action generates new file with formfields for current domain. Note that it
will overwrite existing file.

EDIT action calls an external editor with curent domain profiles.

ADD action adds another profile to current domain. Remember to name the
profiles, by default the have a name with random numbers.

LOAD action loads form data. If there is more then one profile, it will call
dmenu first to choose the profile you want to fill in the form.

ONCE action generates a temp file with formfields including the textareas and
after closing the editor, it will load the data into the formfields. The temp
file is removed

### HTTP/BASIC AUTHENTICATION

You can use the authentication_handler variable to denote how http
authentication should be handled.
If this variable is:

* not set or empty: use webkit internal auth dialog
* a valid handler (i.e. {sh,sync}_spawn correct_script), use this handler
* innvalid handler (spawn, some other command, uses script that does not
  print anything): skip authentication.

Example:

  set authentication_handler = sync_spawn /patch/to/your/script

Script will be executed on each authentication request.
It will receive four auth-related parameters:

    $8 authentication zone unique identifier (may be used as 'key')
    $9 domain part of URL that requests authentication
    $10 authentication realm
    $11 FALSE if this is the first attempt to authenticate, TRUE otherwise

Script is expected to print exactly two lines of text on stdout (that means
its output must contain exactly two '\n' bytes).
The first line contains username, the second one - password.
If authentication fails, script will be executed again (with $11 = TRUE).
Non-interactive scripts should handle this case and do not try to
authenticate again to avoid loops. If number of '\n' characters in scripts
output does not equal 2, authentication will fail.
That means 401 error will be displayed and uzbl won't try to authenticate anymore.

The simplest example of authentication handler script is:

#!/bin/sh
[ "$11" == "TRUE ] && exit
echo alice
echo wonderland

This script tries to authenticate as user alice with password wonderland once
and never retries authentication.
See examples for more sofisticated, interactive authentication handler.

### JAVASCRIPT HELPER OBJECT DISABLED BECAUSE OF SECURITY LEAK

JavaScript code run from `uzbl` is given a special object in the global
namespace which gives special privileges to these scripts. This object is called
`Uzbl`, and it is added and removed before and after the script execution so
that it is hidden to web JavaScript code (there is no race condition, since all
the JavaScript code runs in a single thread).

Currently, the `Uzbl` object provides only one function:

* `Uzbl.run( <command> )`
  - Command is any `uzbl` command as defined above.
  - Return value: a string, either empty or containing the output of the
    command. Very few commands return their output currently, including `js`,
    `script`, and `print`.
  - Examples:
    * `Uzbl.run("spawn insert_bookmark.sh")`
    * `uri = Uzbl.run("print @uri")` (see variable expansion below)

### EVENTS

Unlike commands, events are not handled in `uzbl` itself, but are propagated
(dispatched) asynchronously through a text stream on `stdout` and/or through a
socket. You'll usually use uzbl by piping it's output to a so-called "event
manager" (EM), or by having the EM listen to a socket.

The EM allows:

* Use of whichever language you want for event handling (Python, Perl, Bash,
  ... you name it). You'll usually send commands (see above) back to `uzbl`
  through its FIFO or socket.
* Keybindings use X keysyms.
* Many fine-grained events (`hover_over_link`, `key_press`, `key_release`,..)
* See example `uzbl-event-manager`.

**Note**: Cookie events are not sent to an event handler but handled internally
  through the cookie handler because of their synchronous nature. Cookie events
  are really something completely different from all other events. Maybe someday
  we'll use HTTP proxies or synchronous events (which also have other nice use
  cases), but for now we still use the handler code.

Events have this format:

     EVENT [uzbl_instance_name] EVENT_NAME event_details

#### Reported events

* `EVENT [uzbl_instance_name] INSTANCE_START process_id`: `uzbl` startup.
* `EVENT [uzbl_instance_name] INSTANCE_EXIT process_id`: `uzbl` shutdown
* `EVENT [uzbl_instance_name] VARIABLE_SET variable_name str|int|float
  variable_value`: Note: `str|int|float` denote the type of `variable_value`.
* `EVENT [uzbl_instance_name] COMMAND_EXECUTED command_name optional_arguments`:
  A command is executed.
* `EVENT [uzbl_instance_name] COMMAND_ERROR command_name`: Tried to execute the
  command `command_name`, but it does not exist.
* `EVENT [uzbl_instance_name] GEOMETRY_CHANGED
  WIDTHxHEIGHT+X_POSITION+Y_POSITION`: When the size or position of the `uzbl`
  window changes.
* `EVENT [uzbl_instance_name] FIFO_SET path_to_fifo`: The path to the FIFO is
  set.
* `EVENT [uzbl_instance_name] SOCKET_SET path_to_socket`: The path to the socket
  is set.
* `EVENT [uzbl_instance_name] LOAD_COMMIT uri`: The first data of a page has
  loaded. `uri` is the URI of the page being loaded.
* `EVENT [uzbl_instance_name] LOAD_START uri`: A change of the page has been
  requested. `uri` is the current URI; the one being departed.
* `EVENT [uzbl_instance_name] LOAD_FINISHED uri`: Loading has finished for the
  page at `uri`.
* `EVENT [uzbl_instance_name] LOAD_ERROR uri reason_of_error`: The URI `uri`
  could not be loaded for the reason described in `reason_of_error`.
* `EVENT [uzbl_instance_name] LOAD_PROGRESS percentage` : While the page is
  loading, gives the `percentage` of the page that has finished loading.
* `EVENT [uzbl_instance_name] REQUEST_STARTING uri`: http resource gets
  requested
* `EVENT [uzbl_instance_name] TITLE_CHANGED title_name`: When the title of the
  page (and hence maybe, the window title) changed. `title_name` is the new
  title.
* `EVENT [uzbl_instance_name] DOWNLOAD_REQUEST download_uri`: When content needs
  to be downloaded, `download_uri` is the URI to get.
* `EVENT [uzbl_instance_name] LINK_HOVER uri`: The mouse hovers over the link
  `uri`.
* `EVENT [uzbl_instance_name] LINK_UNHOVER uri`: The mouse leaves the link
  `uri`.
* `EVENT [uzbl_instance_name] KEY_PRESS key_name`: The key (or mouse button)
  `key_name` is pressed.
* `EVENT [uzbl_instance_name] KEY_RELEASE key_name`: The key (or mouse button)
  `key_name` is released.
* `EVENT [uzbl_instance_name] SELECTION_CHANGED selected_text`: When text is
  selected in the `uzbl` window.
* `EVENT [uzbl_instance_name] NEW_WINDOW uri`: Request to creation of new `uzbl` window,
  with URI `uri` (eg. after clicking a link)
* `EVENT [uzbl_instance_name] WEBINSPECTOR open`: Upon opening webinspector
  window.
* `EVENT [uzbl_instance_name] WEBINSPECTOR close`: Upon closing webinspector
  window.
* `EVENT [uzbl_instance_name] FOCUS_GAINED`: When `uzbl` window gains keyboard
  focus.
* `EVENT [uzbl_instance_name] FOCUS_LOST`: When `uzbl` window loses keyboard
  focus.
* `EVENT [uzbl_instance_name] FORM_ACTIVE`: When an editable HTML is clicked.
* `EVENT [uzbl_instance_name] ROOT_ACTIVE`: When the document body or any
  non-editable element is clicked.
* `EVENT [uzbl_instance_name] FILE_INCLUDED filename`: When the `include`
  commands successfully loads a file, given by `filename`.
* `EVENT [uzbl_instance_name] PLUG_CREATED plug_id`: When `uzbl-core` is in
  Xembed mode, `plug_id` is the Xembed ID used.
* `EVENT [uzbl_instance_name] BUILTINS command_list`: Shows a list of all `uzbl`
  commands, whitespace separated, on startup.

Events/requests which the EM and its plugins listens for

* `BIND` and `MODE_BIND`: Define global and per-mode key/button binds.
  - `request BIND <keycmd> = <command>` Set global binding (this is a shortcut
    for `request MODE_BIND global <keycmd> = <command>`).
  - `request MODE_BIND <modespec> <keycmd> = <command>` Set a local binding for
    `<modespec>`. The `<modespec>` can be anything like `command`,
    `insert,command`, `global`, `global,-insert`.

  The `<keycmd>` has a special syntax:
  - `<keycmd>` ends with a `_`: the command will only be invoked after pressing
    return/enter. If the user enters text where `<string>` has the underscore,
    `%s` in the `<command>` string will be replaced by this text (optional).
  - `<keycmd>` ends with a `*`: similar behavior as with an underscore, but also
    makes the binding incremental (i.e. the command will be invoked after
    reaching the `*` point then on every subsequent keystroke).
  - `<keycmd>` ends with a `!`: the command will only be invoked after pressing
    return/enter, no replacement happens. this is useful for preventing `x` to
    match when you want to bind `xx` also.
  - `<keycmd>` ends on a different character: you need to type the full string,
    which will trigger the command immediately, without pressing enter/return.
  - TODO explain stacked bindings and multi-stage (is that the same?) and what
    else am i missing? modkeys, showing a prompt mid-bind.

  The `<keycmd>` can be any representation of a key on your keyboard or a
  mousebutton. (note: not all mousebuttons work correctly yet). Examples:

  - `event BIND o _ = uri %s`
  - `uzbl` will load the url when you type: `o <url><enter>`
  - `event BIND /* = search %s`
  - A `search` command which is called on every character typed after the slash,
    letting you see the search narrow down while typing.
  - Hitting return, enter or esc will terminate the search.
  - `event BIND ZZ = exit`
  - When you type `ZZ` and nothing else, the `exit` command will be triggered
    immediately.
* `MODE_CONFIG`: Set mode specific configs. If the mode being modified is the
  current mode then apply the changes immediately.
  - `request MODE_CONFIG <mode> <key> = <value>`
* `ON_EVENT`: Execute a command when a given event is fired.
  - `request ON_EVENT <EVENT_NAME> <command>`
* `PROGRESS_CONFIG`: Set a configuration option for `LOAD_PROGRESS` updates.
  - `request PROGRESS_CONFIG <key> = <value>`: Set progress config variable
    `key` to `value`.
* `MODMAP`: Set an alternate name for a key or button.
  - `request MODMAP <from> <to>`: Create an alias `<to>` for key command
    `<from>`. This allows `<to>` to be bound to a command, which will be invoked
    when the `<from>` key or button is pressed.
* `IGNORE_KEY`: Ignore a key pattern, specified by `<glob>`.
  - `request IGNORE_KEY <glob>`
* `MODKEY_ADDITION`: Create a compound modkey from multiple individual keys.
  - `request MODKEY_ADDITION <key1> <key2> <keyn> <result>`: The modkey
    `<result>` is considered pressed when all of `<key1>`, `<key2>`, and
    `<keyn>` are pressed.
* `TOGGLE_MODES`
  - `request TOGGLE_MODES <mode1> <mode2> ... <moden>`
* `APPEND_KEYCMD`: Append a string to the current keycmd.
  - `request APPEND_KEYCMD <string>`: Append `<string>` to the current keycmd.
* `INJECT_KEYCMD`: Injecting a string into the keycmd at the cursor position.
  - `request INJECT_KEYCMD <string>`: Inject `<string>` into the keycmd at the
    current cursor position.
* `KEYCMD_DELETE`: Removes the character after the cursor position in the
  keycmd.
* `KEYCMD_STRIP_WORD`: Removes the last word from the keycmd, similar to
  readline `^W`.
* `KEYCMD_EXEC_CURRENT`: (tries to) execute whatever is in the keycmd.
* `SET_KEYCMD`: Allow setting of the keycmd externally.
  - `request SET_KEYCMD <string>`: Set the keycmd to `<string>`.
* `SET_CURSOR_POS`: Allow setting of the cursor position externally.
  - `request SET_CURSOR_POS <index>`: Set the keycmd cursor to `<index>`. If
    `<index>` is `+`, advance the cursor by one character, and if it is `-`,
    move the cursor back by one character.
* `START_COMPLETION`: TODO explain completion

### COMMAND LINE ARGUMENTS

`uzbl` is invoked as

    uzbl-(core|browser|tabbed) [ arguments ] [ uri ]

where `arguments` and `uri` are both optional. `arguments` can be:

* `-u`, `--uri=URI`: URI to load at startup. Equivalent to `uzbl <uri>` or `set
  uri = URI` after `uzbl` has launched.
* `-v`, `--verbose`: Whether to print all messages or just errors.
* `-n`, `--name=NAME`: Name of the current instance (defaults to Xorg window
  id or random for GtkSocket mode).
* `-c`, `--config=FILE`: Path to config file or `-` for stdin.
* `-s`, `--socket=SOCKET`: Xembed socket ID.
* `--connect-socket=SOCKET`: Connect to server socket for event managing.
* `-p`, `--print-events`: Whether to print events to stdout
* `-g`, `--geometry=GEOMETRY`: Set window geometry (format: `WIDTHxHEIGHT+-X+-Y`
  or `maximized`).
* `-V`, `--version`: Print the version and exit.
* `--display=DISPLAY`: X display to use.
* `--help`: Display help.

`uzbl-core scheme://address` will work as you expect. If you don't provide the
`scheme://` part, it will check if the argument is an existing file in the
filesystem, if it is, it will prepend `file://`, if not, it will prepend
`http://`.

### BUGS

Please report new issues to the [Uzbl bugtracker](http://uzbl.org/bugs).
